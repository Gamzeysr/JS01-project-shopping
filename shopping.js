const taxtRate = 0.18;
const shippingPrice = 15;
const shippingFreePrice = 300;

window.addEventListener("load", () => {
    // calculateCartPrice();
    localStorage.setItem("taxRate", taxtRate);
    localStorage.setItem("shippingPrice", shippingPrice);
    localStorage.setItem("shippingFreePrice", shippingFreePrice);
    // //!ðŸ‘† Bu sekilde local staregeÄ±me ve sessionStorage me attÄ±m bÃ¶ÄŸlelikle
    sessionStorage.setItem("taxRate", taxtRate);
    sessionStorage.setItem("shippingPrice", shippingPrice);
    sessionStorage.setItem("shippingFreePrice", shippingFreePrice);

})

// //! localStorage ile sessionStorage in farkÄ±: kullanÄ±cÄ± oturumu sonlandÄ±rdÄ±gÄ± zaman bilgiler sessionStorage silinmiÅŸ oluyor.localStorage de kalÄ±yor .

const productsDiv = document.querySelector(".products");
//? ðŸ‘†Bu kÄ±sÄ±mda bu Ã¼Ã§ Ã¼rÃ¼nÃ¼n ana divini yani productina yakalamÄ±ÅŸ oluyorum.Yani bu sayfadaki Ã¼Ã§ Ã¼rÃ¼ne de bu sekilde hepsine eriÅŸebiliyorum
//? benim amacÄ±m burada productslarÄ±n iÃ§erisindekilere iÅŸlevsllik kazandÄ±rmak

//*âœ¨Capturing and Bubbling
//? Capturing yontemi sayesinde sayfama yeni bir Ã¼rÃ¼n bile eklenmiÅŸ olsa o Ã¼rÃ¼n products divine girecek ve ben burada onu Capturing yontemi ile yakalamÄ±ÅŸ olacam 
productsDiv.addEventListener("click", (event) => {
    if (event.target.className == "fa-solid fa-minus") {
        // console.log("minus btn is clicked!");
        //burda dedgÄ±m tÄ±klanÄ±lan element eger eksi butonu Ä±se ðŸ‘† 
        // assagÄ±daki olaylar gerceklesecek 


        if (event.target.parentElement.querySelector(".quantity").innerText > 1) {
            //ðŸ‘† tÄ±klanan elementÄ±n parentÄ±na git ve 1 den byukse
            event.target.parentElement.querySelector(".quantity").innerText--;
            //ðŸ‘† her  e tÄ±klanÄ±ldÄ±gÄ±nda yanÄ± eksÄ± butonuna basÄ±ldÄ±gÄ±nda bÄ±rer bÄ±rer dÃ¼ÅŸ dedik.  
            calculateProductPrice(event.target);
            calculateCartPrice();
            //?ðŸ‘† Ã¼rÃ¼nler eksi butonuna basÄ±ldÄ±gÄ±nda hrekete gececeÄŸinden burada ve eksi butonuna hrekete gececinden eksi butonunun oldugu yerde fonk larÄ± cagÄ±rdÄ±k 
        }
        //   eÄŸer tÄ±klamÄ±ÅŸ oldugumÄ±n parentelementinnin clasÄ±nÄ±n ismi quantity olanÄ± 1 den buyukse bir bir azalt dedik buarada
        else {
            if (confirm("Product will be removed???")) {
                //? confirm true mu false mu diye sorup kaldÄ±rma iÅŸlemi remove yapÄ±yor burada
                event.target.parentElement.parentElement.parentElement.remove();
                //?kaldÄ±r uyarÄ±nÄ±a tamam dersek div i kaldÄ±rmÄ±ÅŸ oluyoruz
                calculateCartPrice();
                //?ðŸ‘† silme yanÄ± kaldÄ±rma olayÄ±nda sadece sepet harekete gececÄŸi iÃ§in sepetin oldugu fonk cagÄ±rdÄ±k buraya bosu bosuna diÄŸer Ã¼rÃ¼nleri ekleyecek olan fonk cagÄ±rmadÄ±k 
            }
        }
    }
    else if (event.target.classList.contains("fa-plus")) {
        // console.log("plus btn is clicked!");
        event.target.previousElementSibling.innerText++;
        //ðŸ‘† Burada tÄ±kladÄ±gÄ±m hedefdekinin bir Ã¶nceki elementi p iÃ§inde ki  oluyor bunlarÄ±n innertextine artÄ±r dedim bÃ¶ÄŸlelikle Yani artÄ± butonuna basÄ±ldÄ±gÄ±nda 1 leri her seferinde bir artÄ±r dedim
        calculateProductPrice(event.target);
        calculateCartPrice();
        //?ðŸ‘† Ã¼rÃ¼nler eksi butonuna basÄ±ldÄ±gÄ±nda hrekete gececeÄŸinden burada ve eksi butonuna hrekete gececinden eksi butonunun oldugu yerde fonk larÄ± cagÄ±rdÄ±k 
    }
    else if (event.target.className == "remove-product") {
        // console.log("remove btn is clicked!");
        event.target.parentElement.parentElement.parentElement.remove();
        calculateCartPrice();
    }
    else {
        console.log("other element is clicked!");
    }
});
// Hesaplama kÄ±smÄ±ðŸ‘‡
const calculateProductPrice = (clickeBtn) => {
    //* burasÄ± Ã¼rÃ¼nleri gÃ¼ncelleyecek olan kÄ±sÄ±m 

    const productInfoDiv = clickeBtn.parentElement.parentElement;
    //*ðŸ‘†quantityi butonuna tÄ±klanÄ±nca direk fiyatlara ulaÅŸamam bu yÃ¼zden.html de ki producT Ä°nfo ya ulaÅŸmalÄ±yÄ±m ki  fiyatlara eriÅŸeyim . product Ä±nfoya ulasÄ±nca her bir recelin fiyatÄ±na ayrÄ± balÄ±n fÄ±yatÄ±na ayrÄ± karadudun fÄ±yatÄ±na ayrÄ± ulaÅŸabiliyorum
    // console.log(productInfoDiv);


    const price = productInfoDiv.querySelector(".product-price strong").innerText;
    //! Burada htmlde ki product-price in stronguna yani iÃ§inde ki 25.98 yazÄ±na ulaÅŸmaya calÄ±sÄ±yorum.
    // alert(price);
    const quantity = productInfoDiv.querySelector(".quantity").innerText;
    //! Buradada quantityleri yani 1 sayÄ±sÄ± yazan yere eriÅŸtik
    const productTotalDiv = productInfoDiv.querySelector(".product-line-price");
    //! Burada da fiyat yazÄ±larÄ±na ulaÅŸtÄ±m 25,98,45,99,74,99 a ulaÅŸtÄ±m.
    productTotalDiv.innerText = (price * quantity).toFixed(2);
    // alert(quantity);
    // Buradada o quatity dedÄŸimiz 1 saysÄ±nÄ± yazan yer ile fiyatÄ± Ã§arpmayÄ± yaptÄ±m
    // toFixed koyarakda ondalÄ±klÄ± sayÄ±lardaki ifadelerden ondalÄ±k kÄ±smÄ± iki tane olsun diye ayarladÄ±k.

}


const calculateCartPrice = () =>
//* burasÄ± da sepetin gÃ¼ncellenek oldgu kÄ±sÄ±m 
// Subtotal tax shipping total yazan yer
{
    const productsTotalPricesDivs = document.querySelectorAll(".product-line-price");

    let subtotal = 0;
    productsTotalPricesDivs.forEach(div => {
        subtotal += parseFloat(div.innerText);
    });
    // console.log(subtotal);
    const taxPrice = subtotal * localStorage.getItem("taxRate");
    // Kdv hesapladÄ±k

    const shippingPrice = parseFloat(subtotal > 0 && subtotal < localStorage.getItem("shippingFreePrice") ? localStorage.getItem("shippingPrice") : 0);

    console.log(shippingPrice);

    document.querySelector("#cart-subtotal").lastElementChild.innerText = subtotal.toFixed(2);

    document.querySelector("#cart-tax p:nth-child(2)").innerText = taxPrice.toFixed(2);

    document.querySelector("#cart-shipping").children[1].innerText = shippingPrice.toFixed(2);

    document.querySelector("#cart-total").lastElementChild.innerText = (subtotal + taxPrice + shippingPrice).toFixed(2);
}





